name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive 

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_ENV"

    # Dependencies installing on Ubuntu (e.g., Vulkan SDK)
    - name: Install dependencies on Ubuntu
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libglfw3-dev libglm-dev libxkbcommon-dev libxinerama-dev \
          libxcursor-dev libxi-dev libxrandr-dev libx11-dev libxext-dev \
          libvulkan-dev wayland-protocols
        wget https://sdk.lunarg.com/sdk/download/1.3.239.0/linux/vulkan-sdk-1.3.239.0-linux.tar.gz
        tar -xzf vulkan-sdk-1.3.239.0-linux.tar.gz
        export VULKAN_SDK=$(pwd)/1.3.239.0/x86_64
        echo "VULKAN_SDK=$VULKAN_SDK" >> $GITHUB_ENV
        echo "PATH=$VULKAN_SDK/bin:$PATH" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=$VULKAN_SDK/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
        echo "VK_ICD_FILENAMES=$VULKAN_SDK/etc/vulkan/icd.d" >> $GITHUB_ENV
        echo "VK_LAYER_PATH=$VULKAN_SDK/etc/vulkan/explicit_layer.d" >> $GITHUB_ENV

    # Configure CMake
    - name: Configure CMake
      run: >
        cmake -B ${{ env.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ env.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ env.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Clean build directory
      run: |
        if [ $RUNNER_OS = 'Linux' ]; then
          rm -rf ${{ env.build-output-dir }}
        elif [ $RUNNER_OS = 'Windows' ]; then
          cmd /c "del /q ${{ env.build-output-dir }}\\*"
          cmd /c "rmdir /s /q ${{ env.build-output-dir }}"
        fi
      shell: bash
